// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package structs

import "fmt"
import "reflect"
import "encoding/json"

// UnmarshalJSON implements json.Unmarshaler.
func (j *RcSchemaJsonDublinCoreLanguageDirection) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RcSchemaJsonDublinCoreLanguageDirection {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RcSchemaJsonDublinCoreLanguageDirection, v)
	}
	*j = RcSchemaJsonDublinCoreLanguageDirection(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RcSchemaJsonProjectsElemVersification) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RcSchemaJsonProjectsElemVersification {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RcSchemaJsonProjectsElemVersification, v.Value)
	}
	*j = RcSchemaJsonProjectsElemVersification(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *RcSchemaJsonProjectsElemVersification) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RcSchemaJsonCheckingCheckingLevel) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RcSchemaJsonCheckingCheckingLevel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RcSchemaJsonCheckingCheckingLevel, v)
	}
	*j = RcSchemaJsonCheckingCheckingLevel(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RcSchemaJsonChecking) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain RcSchemaJsonChecking
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["checking_entity"]; !ok || v == nil {
		plain.CheckingEntity = []string{}
	}
	if v, ok := raw["checking_level"]; !ok || v == nil {
		plain.CheckingLevel = "1"
	}
	*j = RcSchemaJsonChecking(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RcSchemaJsonDublinCoreConformsto) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RcSchemaJsonDublinCoreConformsto {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RcSchemaJsonDublinCoreConformsto, v)
	}
	*j = RcSchemaJsonDublinCoreConformsto(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RcSchemaJsonProjectsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["path"]; !ok || v == nil {
		return fmt.Errorf("field path in RcSchemaJsonProjectsElem: required")
	}
	type Plain RcSchemaJsonProjectsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["categories"]; !ok || v == nil {
		plain.Categories = nil
	}
	if v, ok := raw["identifier"]; !ok || v == nil {
		plain.Identifier = ""
	}
	if v, ok := raw["sort"]; !ok || v == nil {
		plain.Sort = 0
	}
	if v, ok := raw["title"]; !ok || v == nil {
		plain.Title = ""
	}
	*j = RcSchemaJsonProjectsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProjectIdentifier) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProjectIdentifier {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProjectIdentifier, v)
	}
	*j = ProjectIdentifier(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RcSchemaJsonDublinCoreType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RcSchemaJsonDublinCoreType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RcSchemaJsonDublinCoreType, v)
	}
	*j = RcSchemaJsonDublinCoreType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RcSchemaJsonDublinCore) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["language"]; !ok || v == nil {
		return fmt.Errorf("field language in RcSchemaJsonDublinCore: required")
	}
	if v, ok := raw["subject"]; !ok || v == nil {
		return fmt.Errorf("field subject in RcSchemaJsonDublinCore: required")
	}
	type Plain RcSchemaJsonDublinCore
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["conformsto"]; !ok || v == nil {
		plain.Conformsto = "rc0.2"
	}
	if v, ok := raw["contributor"]; !ok || v == nil {
		plain.Contributor = []string{}
	}
	if v, ok := raw["creator"]; !ok || v == nil {
		plain.Creator = ""
	}
	if v, ok := raw["description"]; !ok || v == nil {
		plain.Description = ""
	}
	if v, ok := raw["format"]; !ok || v == nil {
		plain.Format = ""
	}
	if v, ok := raw["identifier"]; !ok || v == nil {
		plain.Identifier = ""
	}
	if v, ok := raw["issued"]; !ok || v == nil {
		plain.Issued = ""
	}
	if v, ok := raw["modified"]; !ok || v == nil {
		plain.Modified = ""
	}
	if v, ok := raw["publisher"]; !ok || v == nil {
		plain.Publisher = ""
	}
	if v, ok := raw["relation"]; !ok || v == nil {
		plain.Relation = []RelationItem{}
	}
	if v, ok := raw["rights"]; !ok || v == nil {
		plain.Rights = "CC BY-SA 4.0"
	}
	if v, ok := raw["source"]; !ok || v == nil {
		plain.Source = []RcSchemaJsonDublinCoreSourceElem{}
	}
	if v, ok := raw["title"]; !ok || v == nil {
		plain.Title = ""
	}
	if v, ok := raw["type"]; !ok || v == nil {
		plain.Type = ""
	}
	if v, ok := raw["version"]; !ok || v == nil {
		plain.Version = ""
	}
	*j = RcSchemaJsonDublinCore(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RcSchemaJsonDublinCoreSubject) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RcSchemaJsonDublinCoreSubject {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RcSchemaJsonDublinCoreSubject, v)
	}
	*j = RcSchemaJsonDublinCoreSubject(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RcSchemaJsonDublinCoreSourceElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain RcSchemaJsonDublinCoreSourceElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["identifier"]; !ok || v == nil {
		plain.Identifier = ""
	}
	if v, ok := raw["language"]; !ok || v == nil {
		plain.Language = ""
	}
	if v, ok := raw["version"]; !ok || v == nil {
		plain.Version = ""
	}
	*j = RcSchemaJsonDublinCoreSourceElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProjectIdentifier_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProjectIdentifier_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProjectIdentifier_1, v)
	}
	*j = ProjectIdentifier_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RcSchemaJsonDublinCoreRights) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RcSchemaJsonDublinCoreRights {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RcSchemaJsonDublinCoreRights, v)
	}
	*j = RcSchemaJsonDublinCoreRights(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RcSchemaJsonDublinCoreLanguage) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["identifier"]; !ok || v == nil {
		return fmt.Errorf("field identifier in RcSchemaJsonDublinCoreLanguage: required")
	}
	type Plain RcSchemaJsonDublinCoreLanguage
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["direction"]; !ok || v == nil {
		plain.Direction = "ltr"
	}
	if v, ok := raw["title"]; !ok || v == nil {
		plain.Title = ""
	}
	*j = RcSchemaJsonDublinCoreLanguage(plain)
	return nil
}

// A valid IETF language tag as specified by BCP 47.
type LanguageTag string

// A textual string specified in one or multiple languages, indexed by IETF
// language tag.
type LocalizedText map[string]TrimmedText

// An IANA media type (also known as MIME type)
type MimeType string

// A file path, delimited by forward slashes.
type Path string

type ProjectIdentifier string

const ProjectIdentifierA1Ch ProjectIdentifier = "1ch"
const ProjectIdentifierA1Co ProjectIdentifier = "1co"
const ProjectIdentifierA1Jn ProjectIdentifier = "1jn"
const ProjectIdentifierA1Ki ProjectIdentifier = "1ki"
const ProjectIdentifierA1Pe ProjectIdentifier = "1pe"
const ProjectIdentifierA1Sa ProjectIdentifier = "1sa"
const ProjectIdentifierA1Th ProjectIdentifier = "1th"
const ProjectIdentifierA1Ti ProjectIdentifier = "1ti"
const ProjectIdentifierA2Ch ProjectIdentifier = "2ch"
const ProjectIdentifierA2Co ProjectIdentifier = "2co"
const ProjectIdentifierA2Jn ProjectIdentifier = "2jn"
const ProjectIdentifierA2Ki ProjectIdentifier = "2ki"
const ProjectIdentifierA2Pe ProjectIdentifier = "2pe"
const ProjectIdentifierA2Sa ProjectIdentifier = "2sa"
const ProjectIdentifierA2Th ProjectIdentifier = "2th"
const ProjectIdentifierA2Ti ProjectIdentifier = "2ti"
const ProjectIdentifierA3Jn ProjectIdentifier = "3jn"
const ProjectIdentifierAct ProjectIdentifier = "act"
const ProjectIdentifierAmo ProjectIdentifier = "amo"
const ProjectIdentifierBible ProjectIdentifier = "bible"
const ProjectIdentifierChecking ProjectIdentifier = "checking"
const ProjectIdentifierCol ProjectIdentifier = "col"
const ProjectIdentifierContent ProjectIdentifier = "content"
const ProjectIdentifierDan ProjectIdentifier = "dan"
const ProjectIdentifierDeu ProjectIdentifier = "deu"
const ProjectIdentifierEcc ProjectIdentifier = "ecc"
const ProjectIdentifierEph ProjectIdentifier = "eph"
const ProjectIdentifierEst ProjectIdentifier = "est"
const ProjectIdentifierExo ProjectIdentifier = "exo"
const ProjectIdentifierEzk ProjectIdentifier = "ezk"
const ProjectIdentifierEzr ProjectIdentifier = "ezr"
const ProjectIdentifierGal ProjectIdentifier = "gal"
const ProjectIdentifierGen ProjectIdentifier = "gen"
const ProjectIdentifierHab ProjectIdentifier = "hab"
const ProjectIdentifierHag ProjectIdentifier = "hag"
const ProjectIdentifierHeb ProjectIdentifier = "heb"
const ProjectIdentifierHos ProjectIdentifier = "hos"
const ProjectIdentifierIntro ProjectIdentifier = "intro"
const ProjectIdentifierIsa ProjectIdentifier = "isa"
const ProjectIdentifierJas ProjectIdentifier = "jas"
const ProjectIdentifierJdg ProjectIdentifier = "jdg"
const ProjectIdentifierJer ProjectIdentifier = "jer"
const ProjectIdentifierJhn ProjectIdentifier = "jhn"
const ProjectIdentifierJob ProjectIdentifier = "job"
const ProjectIdentifierJol ProjectIdentifier = "jol"
const ProjectIdentifierJon ProjectIdentifier = "jon"
const ProjectIdentifierJos ProjectIdentifier = "jos"
const ProjectIdentifierJud ProjectIdentifier = "jud"
const ProjectIdentifierLam ProjectIdentifier = "lam"
const ProjectIdentifierLev ProjectIdentifier = "lev"
const ProjectIdentifierLuk ProjectIdentifier = "luk"
const ProjectIdentifierMal ProjectIdentifier = "mal"
const ProjectIdentifierMat ProjectIdentifier = "mat"
const ProjectIdentifierMic ProjectIdentifier = "mic"
const ProjectIdentifierMrk ProjectIdentifier = "mrk"
const ProjectIdentifierNam ProjectIdentifier = "nam"
const ProjectIdentifierNeh ProjectIdentifier = "neh"
const ProjectIdentifierNum ProjectIdentifier = "num"
const ProjectIdentifierOba ProjectIdentifier = "oba"
const ProjectIdentifierObs ProjectIdentifier = "obs"
const ProjectIdentifierPhm ProjectIdentifier = "phm"
const ProjectIdentifierPhp ProjectIdentifier = "php"
const ProjectIdentifierPro ProjectIdentifier = "pro"
const ProjectIdentifierProcess ProjectIdentifier = "process"
const ProjectIdentifierPsa ProjectIdentifier = "psa"
const ProjectIdentifierRev ProjectIdentifier = "rev"
const ProjectIdentifierRom ProjectIdentifier = "rom"
const ProjectIdentifierRut ProjectIdentifier = "rut"
const ProjectIdentifierSng ProjectIdentifier = "sng"
const ProjectIdentifierTit ProjectIdentifier = "tit"
const ProjectIdentifierTranslate ProjectIdentifier = "translate"
const ProjectIdentifierZec ProjectIdentifier = "zec"
const ProjectIdentifierZep ProjectIdentifier = "zep"

type ProjectIdentifier_1 string

const ProjectIdentifier_1_A1Ch ProjectIdentifier_1 = "1ch"
const ProjectIdentifier_1_A1Co ProjectIdentifier_1 = "1co"
const ProjectIdentifier_1_A1Jn ProjectIdentifier_1 = "1jn"
const ProjectIdentifier_1_A1Ki ProjectIdentifier_1 = "1ki"
const ProjectIdentifier_1_A1Pe ProjectIdentifier_1 = "1pe"
const ProjectIdentifier_1_A1Sa ProjectIdentifier_1 = "1sa"
const ProjectIdentifier_1_A1Th ProjectIdentifier_1 = "1th"
const ProjectIdentifier_1_A1Ti ProjectIdentifier_1 = "1ti"
const ProjectIdentifier_1_A2Ch ProjectIdentifier_1 = "2ch"
const ProjectIdentifier_1_A2Co ProjectIdentifier_1 = "2co"
const ProjectIdentifier_1_A2Jn ProjectIdentifier_1 = "2jn"
const ProjectIdentifier_1_A2Ki ProjectIdentifier_1 = "2ki"
const ProjectIdentifier_1_A2Pe ProjectIdentifier_1 = "2pe"
const ProjectIdentifier_1_A2Sa ProjectIdentifier_1 = "2sa"
const ProjectIdentifier_1_A2Th ProjectIdentifier_1 = "2th"
const ProjectIdentifier_1_A2Ti ProjectIdentifier_1 = "2ti"
const ProjectIdentifier_1_A3Jn ProjectIdentifier_1 = "3jn"
const ProjectIdentifier_1_Act ProjectIdentifier_1 = "act"
const ProjectIdentifier_1_Amo ProjectIdentifier_1 = "amo"
const ProjectIdentifier_1_Bible ProjectIdentifier_1 = "bible"
const ProjectIdentifier_1_Checking ProjectIdentifier_1 = "checking"
const ProjectIdentifier_1_Col ProjectIdentifier_1 = "col"
const ProjectIdentifier_1_Content ProjectIdentifier_1 = "content"
const ProjectIdentifier_1_Dan ProjectIdentifier_1 = "dan"
const ProjectIdentifier_1_Deu ProjectIdentifier_1 = "deu"
const ProjectIdentifier_1_Ecc ProjectIdentifier_1 = "ecc"
const ProjectIdentifier_1_Eph ProjectIdentifier_1 = "eph"
const ProjectIdentifier_1_Est ProjectIdentifier_1 = "est"
const ProjectIdentifier_1_Exo ProjectIdentifier_1 = "exo"
const ProjectIdentifier_1_Ezk ProjectIdentifier_1 = "ezk"
const ProjectIdentifier_1_Ezr ProjectIdentifier_1 = "ezr"
const ProjectIdentifier_1_Gal ProjectIdentifier_1 = "gal"
const ProjectIdentifier_1_Gen ProjectIdentifier_1 = "gen"
const ProjectIdentifier_1_Hab ProjectIdentifier_1 = "hab"
const ProjectIdentifier_1_Hag ProjectIdentifier_1 = "hag"
const ProjectIdentifier_1_Heb ProjectIdentifier_1 = "heb"
const ProjectIdentifier_1_Hos ProjectIdentifier_1 = "hos"
const ProjectIdentifier_1_Intro ProjectIdentifier_1 = "intro"
const ProjectIdentifier_1_Isa ProjectIdentifier_1 = "isa"
const ProjectIdentifier_1_Jas ProjectIdentifier_1 = "jas"
const ProjectIdentifier_1_Jdg ProjectIdentifier_1 = "jdg"
const ProjectIdentifier_1_Jer ProjectIdentifier_1 = "jer"
const ProjectIdentifier_1_Jhn ProjectIdentifier_1 = "jhn"
const ProjectIdentifier_1_Job ProjectIdentifier_1 = "job"
const ProjectIdentifier_1_Jol ProjectIdentifier_1 = "jol"
const ProjectIdentifier_1_Jon ProjectIdentifier_1 = "jon"
const ProjectIdentifier_1_Jos ProjectIdentifier_1 = "jos"
const ProjectIdentifier_1_Jud ProjectIdentifier_1 = "jud"
const ProjectIdentifier_1_Lam ProjectIdentifier_1 = "lam"
const ProjectIdentifier_1_Lev ProjectIdentifier_1 = "lev"
const ProjectIdentifier_1_Luk ProjectIdentifier_1 = "luk"
const ProjectIdentifier_1_Mal ProjectIdentifier_1 = "mal"
const ProjectIdentifier_1_Mat ProjectIdentifier_1 = "mat"
const ProjectIdentifier_1_Mic ProjectIdentifier_1 = "mic"
const ProjectIdentifier_1_Mrk ProjectIdentifier_1 = "mrk"
const ProjectIdentifier_1_Nam ProjectIdentifier_1 = "nam"
const ProjectIdentifier_1_Neh ProjectIdentifier_1 = "neh"
const ProjectIdentifier_1_Num ProjectIdentifier_1 = "num"
const ProjectIdentifier_1_Oba ProjectIdentifier_1 = "oba"
const ProjectIdentifier_1_Obs ProjectIdentifier_1 = "obs"
const ProjectIdentifier_1_Phm ProjectIdentifier_1 = "phm"
const ProjectIdentifier_1_Php ProjectIdentifier_1 = "php"
const ProjectIdentifier_1_Pro ProjectIdentifier_1 = "pro"
const ProjectIdentifier_1_Process ProjectIdentifier_1 = "process"
const ProjectIdentifier_1_Psa ProjectIdentifier_1 = "psa"
const ProjectIdentifier_1_Rev ProjectIdentifier_1 = "rev"
const ProjectIdentifier_1_Rom ProjectIdentifier_1 = "rom"
const ProjectIdentifier_1_Rut ProjectIdentifier_1 = "rut"
const ProjectIdentifier_1_Sng ProjectIdentifier_1 = "sng"
const ProjectIdentifier_1_Tit ProjectIdentifier_1 = "tit"
const ProjectIdentifier_1_Translate ProjectIdentifier_1 = "translate"
const ProjectIdentifier_1_Zec ProjectIdentifier_1 = "zec"
const ProjectIdentifier_1_Zep ProjectIdentifier_1 = "zep"

type RcSchemaJson struct {
	// Checking corresponds to the JSON schema field "checking".
	Checking RcSchemaJsonChecking `json:"checking" yaml:"checking"`

	// DublinCore corresponds to the JSON schema field "dublin_core".
	DublinCore RcSchemaJsonDublinCore `json:"dublin_core" yaml:"dublin_core"`

	// Projects corresponds to the JSON schema field "projects".
	Projects []RcSchemaJsonProjectsElem `json:"projects" yaml:"projects"`
}

type RcSchemaJsonChecking struct {
	// CheckingEntity corresponds to the JSON schema field "checking_entity".
	CheckingEntity []string `json:"checking_entity" yaml:"checking_entity"`

	// CheckingLevel corresponds to the JSON schema field "checking_level".
	CheckingLevel RcSchemaJsonCheckingCheckingLevel `json:"checking_level" yaml:"checking_level"`
}

type RcSchemaJsonCheckingCheckingLevel string

const RcSchemaJsonCheckingCheckingLevelA1 RcSchemaJsonCheckingCheckingLevel = "1"
const RcSchemaJsonCheckingCheckingLevelA2 RcSchemaJsonCheckingCheckingLevel = "2"
const RcSchemaJsonCheckingCheckingLevelA3 RcSchemaJsonCheckingCheckingLevel = "3"

type RcSchemaJsonDublinCore struct {
	// Conformsto corresponds to the JSON schema field "conformsto".
	Conformsto RcSchemaJsonDublinCoreConformsto `json:"conformsto" yaml:"conformsto"`

	// Contributor corresponds to the JSON schema field "contributor".
	Contributor []string `json:"contributor" yaml:"contributor"`

	// Creator corresponds to the JSON schema field "creator".
	Creator string `json:"creator" yaml:"creator"`

	// Description corresponds to the JSON schema field "description".
	Description string `json:"description" yaml:"description"`

	// Format corresponds to the JSON schema field "format".
	Format MimeType `json:"format" yaml:"format"`

	// Identifier corresponds to the JSON schema field "identifier".
	Identifier string `json:"identifier" yaml:"identifier"`

	// Issued corresponds to the JSON schema field "issued".
	Issued Timestamp `json:"issued" yaml:"issued"`

	// Language corresponds to the JSON schema field "language".
	Language RcSchemaJsonDublinCoreLanguage `json:"language" yaml:"language"`

	// Modified corresponds to the JSON schema field "modified".
	Modified Timestamp `json:"modified" yaml:"modified"`

	// Publisher corresponds to the JSON schema field "publisher".
	Publisher string `json:"publisher" yaml:"publisher"`

	// Relation corresponds to the JSON schema field "relation".
	Relation []RelationItem `json:"relation" yaml:"relation"`

	// Rights corresponds to the JSON schema field "rights".
	Rights RcSchemaJsonDublinCoreRights `json:"rights" yaml:"rights"`

	// Source corresponds to the JSON schema field "source".
	Source []RcSchemaJsonDublinCoreSourceElem `json:"source" yaml:"source"`

	// Subject corresponds to the JSON schema field "subject".
	Subject RcSchemaJsonDublinCoreSubject `json:"subject" yaml:"subject"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title"`

	// Type corresponds to the JSON schema field "type".
	Type RcSchemaJsonDublinCoreType `json:"type" yaml:"type"`

	// Version corresponds to the JSON schema field "version".
	Version string `json:"version" yaml:"version"`
}

type RcSchemaJsonDublinCoreConformsto string

const RcSchemaJsonDublinCoreConformstoRc02 RcSchemaJsonDublinCoreConformsto = "rc0.2"

type RcSchemaJsonDublinCoreLanguage struct {
	// Direction corresponds to the JSON schema field "direction".
	Direction RcSchemaJsonDublinCoreLanguageDirection `json:"direction" yaml:"direction"`

	// Identifier corresponds to the JSON schema field "identifier".
	Identifier LanguageTag `json:"identifier" yaml:"identifier"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title"`
}

type RcSchemaJsonDublinCoreLanguageDirection string

const RcSchemaJsonDublinCoreLanguageDirectionLtr RcSchemaJsonDublinCoreLanguageDirection = "ltr"
const RcSchemaJsonDublinCoreLanguageDirectionRtl RcSchemaJsonDublinCoreLanguageDirection = "rtl"

type RcSchemaJsonDublinCoreRights string

const RcSchemaJsonDublinCoreRightsCCBY30 RcSchemaJsonDublinCoreRights = "CC BY 3.0"
const RcSchemaJsonDublinCoreRightsCCBYSA30 RcSchemaJsonDublinCoreRights = "CC BY-SA 3.0"
const RcSchemaJsonDublinCoreRightsCCBYSA40 RcSchemaJsonDublinCoreRights = "CC BY-SA 4.0"
const RcSchemaJsonDublinCoreRightsFreeTranslate20InternationalPublicLicense RcSchemaJsonDublinCoreRights = "Free Translate 2.0 International Public License"
const RcSchemaJsonDublinCoreRightsPublicDomain RcSchemaJsonDublinCoreRights = "Public Domain"

type RcSchemaJsonDublinCoreSourceElem struct {
	// Identifier corresponds to the JSON schema field "identifier".
	Identifier string `json:"identifier" yaml:"identifier"`

	// Language corresponds to the JSON schema field "language".
	Language LanguageTag `json:"language" yaml:"language"`

	// Version corresponds to the JSON schema field "version".
	Version string `json:"version" yaml:"version"`
}

type RcSchemaJsonDublinCoreSubject string

const RcSchemaJsonDublinCoreSubjectAlignedBible RcSchemaJsonDublinCoreSubject = "Aligned Bible"
const RcSchemaJsonDublinCoreSubjectAramaicGrammar RcSchemaJsonDublinCoreSubject = "Aramaic Grammar"
const RcSchemaJsonDublinCoreSubjectBible RcSchemaJsonDublinCoreSubject = "Bible"
const RcSchemaJsonDublinCoreSubjectBibleStories RcSchemaJsonDublinCoreSubject = "Bible stories"

// UnmarshalJSON implements json.Unmarshaler.
func (j *RcSchemaJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["checking"]; !ok || v == nil {
		return fmt.Errorf("field checking in RcSchemaJson: required")
	}
	if v, ok := raw["dublin_core"]; !ok || v == nil {
		return fmt.Errorf("field dublin_core in RcSchemaJson: required")
	}
	type Plain RcSchemaJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["projects"]; !ok || v == nil {
		plain.Projects = []RcSchemaJsonProjectsElem{}
	}
	*j = RcSchemaJson(plain)
	return nil
}

const RcSchemaJsonDublinCoreSubjectGreekGrammar RcSchemaJsonDublinCoreSubject = "Greek Grammar"
const RcSchemaJsonDublinCoreSubjectGreekNewTestament RcSchemaJsonDublinCoreSubject = "Greek New Testament"
const RcSchemaJsonDublinCoreSubjectHebrewGrammar RcSchemaJsonDublinCoreSubject = "Hebrew Grammar"
const RcSchemaJsonDublinCoreSubjectHebrewOldTestament RcSchemaJsonDublinCoreSubject = "Hebrew Old Testament"
const RcSchemaJsonDublinCoreSubjectOBSStudyNotes RcSchemaJsonDublinCoreSubject = "OBS Study Notes"
const RcSchemaJsonDublinCoreSubjectOBSStudyQuestions RcSchemaJsonDublinCoreSubject = "OBS Study Questions"
const RcSchemaJsonDublinCoreSubjectOBSTranslationNotes RcSchemaJsonDublinCoreSubject = "OBS Translation Notes"
const RcSchemaJsonDublinCoreSubjectOBSTranslationQuestions RcSchemaJsonDublinCoreSubject = "OBS Translation Questions"
const RcSchemaJsonDublinCoreSubjectOpenBibleStories RcSchemaJsonDublinCoreSubject = "Open Bible Stories"
const RcSchemaJsonDublinCoreSubjectStudyNotes RcSchemaJsonDublinCoreSubject = "Study Notes"
const RcSchemaJsonDublinCoreSubjectStudyQuestions RcSchemaJsonDublinCoreSubject = "Study Questions"
const RcSchemaJsonDublinCoreSubjectTSVOBSStudyNotes RcSchemaJsonDublinCoreSubject = "TSV OBS Study Notes"
const RcSchemaJsonDublinCoreSubjectTSVOBSStudyQuestions RcSchemaJsonDublinCoreSubject = "TSV OBS Study Questions"
const RcSchemaJsonDublinCoreSubjectTSVOBSTranslationNotes RcSchemaJsonDublinCoreSubject = "TSV OBS Translation Notes"
const RcSchemaJsonDublinCoreSubjectTSVOBSTranslationQuestions RcSchemaJsonDublinCoreSubject = "TSV OBS Translation Questions"
const RcSchemaJsonDublinCoreSubjectTSVOBSTranslationWordsLinks RcSchemaJsonDublinCoreSubject = "TSV OBS Translation Words Links"
const RcSchemaJsonDublinCoreSubjectTSVStudyNotes RcSchemaJsonDublinCoreSubject = "TSV Study Notes"
const RcSchemaJsonDublinCoreSubjectTSVStudyQuestions RcSchemaJsonDublinCoreSubject = "TSV Study Questions"
const RcSchemaJsonDublinCoreSubjectTSVTranslationNotes RcSchemaJsonDublinCoreSubject = "TSV Translation Notes"
const RcSchemaJsonDublinCoreSubjectTSVTranslationQuestions RcSchemaJsonDublinCoreSubject = "TSV Translation Questions"
const RcSchemaJsonDublinCoreSubjectTSVTranslationWordsLinks RcSchemaJsonDublinCoreSubject = "TSV Translation Words Links"
const RcSchemaJsonDublinCoreSubjectTranslationAcademy RcSchemaJsonDublinCoreSubject = "Translation Academy"
const RcSchemaJsonDublinCoreSubjectTranslationNotes RcSchemaJsonDublinCoreSubject = "Translation Notes"
const RcSchemaJsonDublinCoreSubjectTranslationQuestions RcSchemaJsonDublinCoreSubject = "Translation Questions"
const RcSchemaJsonDublinCoreSubjectTranslationWords RcSchemaJsonDublinCoreSubject = "Translation Words"

type RcSchemaJsonDublinCoreType string

const RcSchemaJsonDublinCoreTypeBook RcSchemaJsonDublinCoreType = "book"
const RcSchemaJsonDublinCoreTypeBundle RcSchemaJsonDublinCoreType = "bundle"
const RcSchemaJsonDublinCoreTypeDict RcSchemaJsonDublinCoreType = "dict"
const RcSchemaJsonDublinCoreTypeHelp RcSchemaJsonDublinCoreType = "help"
const RcSchemaJsonDublinCoreTypeMan RcSchemaJsonDublinCoreType = "man"

type RcSchemaJsonProjectsElem struct {
	// Categories corresponds to the JSON schema field "categories".
	Categories interface{} `json:"categories,omitempty" yaml:"categories,omitempty"`

	// Identifier corresponds to the JSON schema field "identifier".
	Identifier ProjectIdentifier_1 `json:"identifier" yaml:"identifier"`

	// Path corresponds to the JSON schema field "path".
	Path Path `json:"path" yaml:"path"`

	// Sort corresponds to the JSON schema field "sort".
	Sort int `json:"sort,omitempty" yaml:"sort,omitempty"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title"`

	// Versification corresponds to the JSON schema field "versification".
	Versification *RcSchemaJsonProjectsElemVersification `json:"versification,omitempty" yaml:"versification,omitempty"`
}

type RcSchemaJsonProjectsElemVersification struct {
	Value interface{}
}

// A relation has valid IETF language tag as specified by BCP 47 and a valid
// resource, separated with a slash.
type RelationItem string

type Timestamp string

// A string without surrounding whitespace characters.
type TrimmedText string

// A valid **Uniform Resource Locator**.
type Url string

var enumValues_ProjectIdentifier = []interface{}{
	"gen",
	"exo",
	"lev",
	"num",
	"deu",
	"jos",
	"jdg",
	"rut",
	"1sa",
	"2sa",
	"1ki",
	"2ki",
	"1ch",
	"2ch",
	"ezr",
	"neh",
	"est",
	"job",
	"psa",
	"pro",
	"ecc",
	"sng",
	"isa",
	"jer",
	"lam",
	"ezk",
	"dan",
	"hos",
	"jol",
	"amo",
	"oba",
	"jon",
	"mic",
	"nam",
	"hab",
	"zep",
	"hag",
	"zec",
	"mal",
	"mat",
	"mrk",
	"luk",
	"jhn",
	"act",
	"rom",
	"1co",
	"2co",
	"gal",
	"eph",
	"php",
	"col",
	"1th",
	"2th",
	"1ti",
	"2ti",
	"tit",
	"phm",
	"heb",
	"jas",
	"1pe",
	"2pe",
	"1jn",
	"2jn",
	"3jn",
	"jud",
	"rev",
	"obs",
	"intro",
	"process",
	"translate",
	"checking",
	"bible",
	"content",
}
var enumValues_ProjectIdentifier_1 = []interface{}{
	"gen",
	"exo",
	"lev",
	"num",
	"deu",
	"jos",
	"jdg",
	"rut",
	"1sa",
	"2sa",
	"1ki",
	"2ki",
	"1ch",
	"2ch",
	"ezr",
	"neh",
	"est",
	"job",
	"psa",
	"pro",
	"ecc",
	"sng",
	"isa",
	"jer",
	"lam",
	"ezk",
	"dan",
	"hos",
	"jol",
	"amo",
	"oba",
	"jon",
	"mic",
	"nam",
	"hab",
	"zep",
	"hag",
	"zec",
	"mal",
	"mat",
	"mrk",
	"luk",
	"jhn",
	"act",
	"rom",
	"1co",
	"2co",
	"gal",
	"eph",
	"php",
	"col",
	"1th",
	"2th",
	"1ti",
	"2ti",
	"tit",
	"phm",
	"heb",
	"jas",
	"1pe",
	"2pe",
	"1jn",
	"2jn",
	"3jn",
	"jud",
	"rev",
	"obs",
	"intro",
	"process",
	"translate",
	"checking",
	"bible",
	"content",
}
var enumValues_RcSchemaJsonCheckingCheckingLevel = []interface{}{
	"1",
	"2",
	"3",
}
var enumValues_RcSchemaJsonDublinCoreConformsto = []interface{}{
	"rc0.2",
}
var enumValues_RcSchemaJsonDublinCoreLanguageDirection = []interface{}{
	"ltr",
	"rtl",
}
var enumValues_RcSchemaJsonDublinCoreRights = []interface{}{
	"CC BY 3.0",
	"CC BY-SA 3.0",
	"CC BY-SA 4.0",
	"Free Translate 2.0 International Public License",
	"Public Domain",
}
var enumValues_RcSchemaJsonDublinCoreSubject = []interface{}{
	"Aligned Bible",
	"Aramaic Grammar",
	"Bible",
	"Bible stories",
	"Greek Grammar",
	"Greek New Testament",
	"Hebrew Grammar",
	"Hebrew Old Testament",
	"OBS Study Notes",
	"OBS Study Questions",
	"OBS Translation Notes",
	"OBS Translation Questions",
	"Open Bible Stories",
	"Study Notes",
	"Study Questions",
	"Translation Academy",
	"Translation Notes",
	"Translation Questions",
	"Translation Words",
	"TSV Study Notes",
	"TSV Study Questions",
	"TSV Translation Notes",
	"TSV Translation Questions",
	"TSV Translation Words Links",
	"TSV OBS Study Notes",
	"TSV OBS Study Questions",
	"TSV OBS Translation Notes",
	"TSV OBS Translation Questions",
	"TSV OBS Translation Words Links",
}
var enumValues_RcSchemaJsonDublinCoreType = []interface{}{
	"book",
	"bundle",
	"dict",
	"help",
	"man",
}
var enumValues_RcSchemaJsonProjectsElemVersification = []interface{}{
	"avd",
	"odx",
	"odx-hr",
	"other",
	"rsc",
	"ufw",
	"ufw-bn",
	"ufw-ml",
	"ufw-odx",
	"ufw-rev",
	"obs",
	"",
	nil,
}
